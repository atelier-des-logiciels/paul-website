name: website - build and push

on:
  workflow_dispatch:
  push:
    branches: [master]
    paths:
      - "website/**"
      - .github/workflows/website-build.yml

env:
  KUBE_HOST: ${{ vars.KUBE_HOST }}
  K8S_NAMESPACE: paul
  K8S_DEPLOYMENT: website
  KUBE_CLUSTER_CA_CERT_PEM: ${{ secrets.KUBE_CLUSTER_CA_CERT_PEM }} 
  KUBE_CLIENT_KEY_PEM: ${{ secrets.KUBE_CLIENT_KEY_PEM }}
  KUBE_CLIENT_CERT_PEM: ${{ secrets.KUBE_CLIENT_CERT_PEM }}  

jobs:
  test:
    timeout-minutes: 60
    defaults:
      run:
        working-directory: ./website
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write    
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: "**/package-lock.json"
      - run: npm ci
      - run: npm run audit:security
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }} 
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: website/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Restart website
        run: |
          echo "${{ env.KUBE_CLUSTER_CA_CERT_PEM }}" > ${{ github.workspace }}/ca.pem
          echo "${{ env.KUBE_CLIENT_KEY_PEM }}" > ${{ github.workspace }}/key.pem
          echo "${{ env.KUBE_CLIENT_CERT_PEM }}" > ${{ github.workspace }}/cert.pem
          kubectl config set-cluster default \
            --server=${{ vars.KUBE_HOST }} \
            --certificate-authority=${{ github.workspace }}/ca.pem
          kubectl config set-credentials cluster-admin \
            --client-key=${{ github.workspace }}/key.pem \
            --client-certificate=${{ github.workspace }}/cert.pem
          kubectl config set-context default \
            --cluster=default \
            --namespace=${{ env.K8S_NAMESPACE }} \
            --user=cluster-admin
          kubectl config use-context default
          kubectl rollout restart deployment ${{ env.K8S_DEPLOYMENT }}           
